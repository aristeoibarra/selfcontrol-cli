#!/bin/bash

# SelfControl CLI - Main Executable
# Production-ready command-line interface for SelfControl.app
# Version: 2.0.0

set -euo pipefail

# =============================================================================
# INITIALIZATION
# =============================================================================

# Determine script location
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# Check if we're in development mode (lib directory exists relative to script)
if [[ -d "$ROOT_DIR/lib" && -f "$ROOT_DIR/lib/core.sh" ]]; then
    readonly LIB_DIR="$ROOT_DIR/lib"
else
    # Production mode - libraries are in ~/.local/lib/selfcontrol-cli
    readonly LIB_DIR="$HOME/.local/lib/selfcontrol-cli"
fi

# Source libraries
# shellcheck source=lib/core.sh
source "$LIB_DIR/core.sh"
# shellcheck source=lib/schedule.sh
source "$LIB_DIR/schedule.sh"

# =============================================================================
# COMMAND FUNCTIONS
# =============================================================================

# Show help information
cmd_help() {
    cat << 'EOF'
SelfControl CLI - Automated Scheduled Blocking for macOS

USAGE:
    selfcontrol-cli <command> [options]

COMMANDS:
üìä Status & Information:
    status              Show current SelfControl and schedule status
    info                Show detailed block information
    version             Show version and system information

üöÄ Block Management:
    start [hours]       Start manual block (default: 2 hours)

‚è∞ Schedule Management:
    schedule list       Show all configured schedules
    schedule status     Show current schedule status
    schedule enable <name>      Enable specific schedule
    schedule disable <name>     Disable specific schedule
    schedule reload     Reload configuration from file
    schedule test       Test schedule logic in real-time
    schedule setup      Setup automated scheduling with cron

üîß Utility:
    init                Initialize configuration and directories

EXAMPLES:
    selfcontrol-cli start 4             # Block for 4 hours
    selfcontrol-cli schedule list       # Show all schedules
    selfcontrol-cli schedule enable work_hours
    selfcontrol-cli schedule test       # Test schedule logic

For more information, visit:
https://github.com/aristeoibarra/selfcontrol-cli
EOF
}

# Show version information
cmd_version() {
    echo "SelfControl CLI v$SELFCONTROL_CLI_VERSION"
    echo "Production-ready scheduled blocking for macOS"
    echo ""
    echo "SelfControl.app integration: $([ -x "$SELFCONTROL_CLI_PATH" ] && echo "‚úÖ Available" || echo "‚ùå Not found")"
    echo "Configuration: $([ -f "$SCHEDULE_CONFIG" ] && echo "‚úÖ Found" || echo "‚ùå Not found")"
    echo ""
    echo "Paths:"
    echo "  Root directory: $ROOT_DIR"
    echo "  Config file: $SCHEDULE_CONFIG"
    echo "  Log file: $SCHEDULE_LOG"
}

# Initialize SelfControl CLI
cmd_init() {
    echo "üöÄ Initializing SelfControl CLI..."
    echo ""

    # Create default configuration if it doesn't exist
    if [[ ! -f "$SCHEDULE_CONFIG" ]]; then
        local example_config="$ROOT_DIR/config/schedule.example.json"
        if [[ -f "$example_config" ]]; then
            cp "$example_config" "$SCHEDULE_CONFIG"
            echo "‚úÖ Created default configuration from example"
        else
            # Create minimal configuration
            cat > "$SCHEDULE_CONFIG" << 'JSON'
{
  "global_settings": {
    "check_interval": 5,
    "timezone": "auto",
    "prevent_duplicates": true,
    "log_level": "info"
  },
  "schedules": [],
  "blocklists": {
    "default": "blocklist.selfcontrol"
  },
  "logging": {
    "enabled": true,
    "max_size_mb": 10,
    "keep_days": 30
  }
}
JSON
            echo "‚úÖ Created minimal default configuration"
        fi
    fi

    # Create default blocklist if it doesn't exist
    local default_blocklist="$ROOT_DIR/config/blocklist.selfcontrol"
    if [[ ! -f "$default_blocklist" ]]; then
        local example_blocklist="$ROOT_DIR/config/blocklist.example.selfcontrol"
        if [[ -f "$example_blocklist" ]]; then
            cp "$example_blocklist" "$default_blocklist"
            echo "‚úÖ Created default blocklist from example"
        else
            echo "‚ö†Ô∏è  No default blocklist found. Please create: $default_blocklist"
        fi
    fi

    echo ""
    echo "üéâ SelfControl CLI initialized successfully!"
    echo ""
    echo "Next steps:"
    echo "1. Customize your schedule: $SCHEDULE_CONFIG"
    echo "2. Customize your blocklist: $default_blocklist"
    echo "3. Run 'selfcontrol-cli schedule setup' to enable automation"
    echo "4. Test with 'selfcontrol-cli schedule test'"
}

# Quick status check
cmd_status() {
    if ! init_selfcontrol_cli; then
        die "Failed to initialize SelfControl CLI"
    fi

    case $(is_selfcontrol_running) in
        0)
            echo "üîí SelfControl: ACTIVE"

            # Get detailed info if available
            local settings
            if settings=$(get_selfcontrol_settings); then
                local end_date_utc
                end_date_utc=$(echo "$settings" | grep "BlockEndDate" | sed 's/.*"\([^"]*\)".*/\1/')

                if [[ -n "$end_date_utc" ]]; then
                    local end_timestamp now_timestamp
                    end_timestamp=$(date -j -f "%Y-%m-%d %H:%M:%S %z" "$end_date_utc" "+%s" 2>/dev/null)
                    now_timestamp=$(date "+%s")
                    local remaining_seconds=$((end_timestamp - now_timestamp))

                    if [[ $remaining_seconds -gt 0 ]]; then
                        local remaining_hours=$((remaining_seconds / 3600))
                        local remaining_minutes=$(((remaining_seconds % 3600) / 60))
                        echo "‚è∞ Remaining: ${remaining_hours}h ${remaining_minutes}m"
                    fi
                fi
            fi

            # Check if this was started by a schedule
            if [[ -f "$SCHEDULE_CONFIG" ]]; then
                local active_schedule
                if active_schedule=$(get_active_schedule 2>/dev/null); then
                    local schedule_name
                    schedule_name=$(json_get_value "$active_schedule" "name" "unknown")
                    echo "üìÖ Active schedule: $schedule_name"
                fi
            fi
            ;;
        *)
            echo "‚úÖ SelfControl: INACTIVE"
            # Check if there's an active schedule that should be running
            if [[ -f "$SCHEDULE_CONFIG" ]]; then
                local active_schedule
                if active_schedule=$(get_active_schedule 2>/dev/null); then
                    local schedule_name end_time remaining
                    schedule_name=$(json_get_value "$active_schedule" "name" "unknown")
                    end_time=$(json_get_value "$active_schedule" "end_time" "")
                    remaining=$(get_remaining_minutes "$end_time")
                    echo "‚ö†Ô∏è  Schedule '$schedule_name' should be active!"
                    echo "‚è∞ Should run until: $end_time ($((remaining / 60))h $((remaining % 60))m left)"
                    echo "üí° Run 'selfcontrol-cli schedule check' to start scheduled block"
                else
                    echo "üí° Ready to start a new block"
                fi
            else
                echo "üí° Ready to start a new block"
            fi
            ;;
    esac
}

# Detailed information
cmd_info() {
    if ! init_selfcontrol_cli; then
        die "Failed to initialize SelfControl CLI"
    fi

    echo "üìä SelfControl CLI Information"
    echo "=============================="
    echo ""

    # Version info
    echo "Version: $SELFCONTROL_CLI_VERSION"
    echo "SelfControl.app: $([ -x "$SELFCONTROL_CLI_PATH" ] && echo "‚úÖ Available" || echo "‚ùå Not found")"
    echo ""

    # Current status
    echo "Current Status:"
    cmd_status
    echo ""

    # Configuration info
    if [[ -f "$SCHEDULE_CONFIG" ]]; then
        echo "Configuration: ‚úÖ Found"
        local schedule_count
        schedule_count=$(grep -c '"name"' "$SCHEDULE_CONFIG" 2>/dev/null || echo "0")
        echo "Schedules configured: $schedule_count"
    else
        echo "Configuration: ‚ùå Not found"
        echo "Run 'selfcontrol-cli init' to create default configuration"
    fi
    echo ""

    # Log info
    if [[ -f "$SCHEDULE_LOG" ]]; then
        echo "Log file: ‚úÖ Found ($(wc -l < "$SCHEDULE_LOG") lines)"
    else
        echo "Log file: ‚ùå Not found"
    fi
}

# Start manual block
cmd_start() {
    local hours="${1:-2}"
    local blocklist_file="$ROOT_DIR/config/blocklist.selfcontrol"

    if ! init_selfcontrol_cli; then
        die "Failed to initialize SelfControl CLI"
    fi

    # Check if already running
    if is_selfcontrol_running; then
        echo "‚ö†Ô∏è  SelfControl is already running"
        echo "Use 'selfcontrol-cli status' to see remaining time"
        exit 1
    fi

    # Validate hours
    if ! echo "$hours" | grep -qE '^[0-9]+(\.[0-9]+)?$'; then
        die "Invalid hours format: $hours"
    fi

    # Check if blocklist exists
    if [[ ! -f "$blocklist_file" ]]; then
        die "Blocklist file not found. Run 'selfcontrol-cli init' to create default configuration."
    fi

    # Calculate end date
    local minutes_to_add
    minutes_to_add=$(echo "$hours * 60" | bc | cut -d. -f1)
    local end_date
    end_date=$(date -v +${minutes_to_add}M '+%Y-%m-%d %H:%M:%S')

    echo "üöÄ Starting SelfControl block..."
    echo "Duration: $hours hours"
    echo "Ends at: $end_date"
    echo ""

    # Start block
    start_selfcontrol_block "$hours" "$blocklist_file"

    echo "‚úÖ Block started successfully!"
    echo "Use 'selfcontrol-cli status' to check remaining time"
}

# Schedule management commands
cmd_schedule() {
    local subcommand="${1:-list}"
    shift || true

    case "$subcommand" in
        "list")
            echo "üìÖ SelfControl Scheduled Blocks"
            echo ""
            echo "üïê Current time: $(date '+%A, %B %d - %H:%M')"
            echo ""

            if [[ ! -f "$SCHEDULE_CONFIG" ]]; then
                echo "‚ùå No configuration found. Run 'selfcontrol-cli init' first."
                return 1
            fi

            local config
            if ! config=$(load_schedule_config); then
                echo "‚ùå Failed to load configuration"
                return 1
            fi

            # Extract schedules array
            local schedules
            schedules=$(echo "$config" | sed -n 's/.*"schedules"[[:space:]]*:[[:space:]]*\[\([^]]*\)\].*/\1/p')

            if [[ -z "$schedules" ]]; then
                echo "No schedules configured."
                return 0
            fi

            # Display each schedule
            echo "$schedules" | grep -o '{"[^}]*"name"[^}]*"[^"]*"' | while read -r schedule; do
                local name enabled start_time end_time days description
                name=$(json_get_value "$schedule" "name")
                enabled=$(json_get_value "$schedule" "enabled" "false")
                start_time=$(json_get_value "$schedule" "start_time")
                end_time=$(json_get_value "$schedule" "end_time")
                days=$(json_get_array "$schedule" "days")
                description=$(json_get_value "$schedule" "description" "")

                echo "üìã $name"
                if [[ -n "$description" ]]; then
                    echo "   Description: $description"
                fi
                echo "   Status: $([ "$enabled" == "true" ] && echo "‚úÖ Enabled" || echo "‚ùå Disabled")"
                echo "   Time: $start_time - $end_time"
                echo "   Days: $(echo "$days" | tr '\n' ' ')"
                echo ""
            done
            ;;
        "status")
            echo "üìä Schedule Status"
            echo "=================="
            echo ""

            local active_schedule
            if active_schedule=$(get_active_schedule 2>/dev/null); then
                local schedule_name
                schedule_name=$(json_get_value "$active_schedule" "name" "unknown")
                echo "üéØ Active schedule: $schedule_name"
            else
                echo "üéØ No active schedule"
            fi
            ;;
        "enable")
            local schedule_name="$1"
            if [[ -z "$schedule_name" ]]; then
                echo "‚ùå Please specify a schedule name"
                echo "Usage: selfcontrol-cli schedule enable <name>"
                return 1
            fi

            if update_schedule_status "$schedule_name" "true"; then
                echo "‚úÖ Enabled schedule: $schedule_name"
            else
                echo "‚ùå Failed to enable schedule: $schedule_name"
                return 1
            fi
            ;;
        "disable")
            local schedule_name="$1"
            if [[ -z "$schedule_name" ]]; then
                echo "‚ùå Please specify a schedule name"
                echo "Usage: selfcontrol-cli schedule disable <name>"
                return 1
            fi

            if update_schedule_status "$schedule_name" "false"; then
                echo "‚úÖ Disabled schedule: $schedule_name"
            else
                echo "‚ùå Failed to disable schedule: $schedule_name"
                return 1
            fi
            ;;
        "reload")
            echo "üîÑ Reloading configuration..."
            if load_schedule_config >/dev/null; then
                echo "‚úÖ Configuration reloaded successfully"
            else
                echo "‚ùå Failed to reload configuration"
                return 1
            fi
            ;;
        "test")
            test_schedule_logic
            ;;
        "setup")
            echo "ü§ñ Setting up automated scheduling..."
            echo ""
            echo "This will configure cron to check schedules every 5 minutes."
            echo ""

            # Check if cron job already exists
            if crontab -l 2>/dev/null | grep -q "selfcontrol-cli schedule check"; then
                echo "‚ö†Ô∏è  Cron job already exists"
                echo "Current cron jobs:"
                crontab -l 2>/dev/null | grep "selfcontrol-cli"
                return 0
            fi

            # Add cron job
            local cron_entry
            cron_entry="*/5 * * * * $ROOT_DIR/bin/selfcontrol-cli schedule check >/dev/null 2>&1"

            (crontab -l 2>/dev/null; echo "$cron_entry") | crontab -
            echo "‚úÖ Added cron job: $cron_entry"
            echo ""
            echo "Automated scheduling is now enabled!"
            echo "Schedules will be checked every 5 minutes."
            ;;
        "check")
            # This is called by cron
            check_and_execute_schedules
            ;;
        *)
            echo "‚ùå Unknown schedule command: $subcommand"
            echo "Available commands: list, status, enable, disable, reload, test, setup"
            return 1
            ;;
    esac
}

# =============================================================================
# MAIN DISPATCHER
# =============================================================================

# Main command dispatcher
main() {
    local command="${1:-help}"
    shift || true

    case "$command" in
        "help"|"-h"|"--help")
            cmd_help
            ;;
        "version"|"-v"|"--version")
            cmd_version
            ;;
        "init")
            cmd_init
            ;;
        "status"|"st")
            cmd_status
            ;;
        "info")
            cmd_info
            ;;
        "start")
            shift
            cmd_start "$@"
            ;;
        "schedule"|"sched")
            shift
            cmd_schedule "$@"
            ;;
        *)
            echo "‚ùå Unknown command: $command"
            echo ""
            echo "Use 'selfcontrol-cli help' for usage information."
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
